package com.hiittimer.app.ui.timer

import androidx.compose.foundation.background
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.hiittimer.app.R
import com.hiittimer.app.data.IntervalType
import com.hiittimer.app.data.TimerState
import com.hiittimer.app.ui.components.IntervalTransitionEffect
import com.hiittimer.app.ui.components.VisualFeedbackOverlay
import com.hiittimer.app.ui.theme.HIITColors

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TimerScreen(
    viewModel: TimerViewModel = viewModel(),
    onNavigateToConfig: () -> Unit = {}
) {
    val timerStatus by viewModel.timerStatus.collectAsState()
    val isDarkTheme = isSystemInDarkTheme()

    // Color scheme based on interval type and theme
    val intervalColor = when {
        timerStatus.isWorkInterval -> if (isDarkTheme) HIITColors.WorkIndicatorDark else HIITColors.WorkIndicatorLight
        else -> if (isDarkTheme) HIITColors.RestIndicatorDark else HIITColors.RestIndicatorLight
    }

    Box(modifier = Modifier.fillMaxSize()) {
        // Main content
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(MaterialTheme.colorScheme.background)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
        // Header with settings button (placeholder for now)
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            TextButton(onClick = onNavigateToConfig) {
                Text("Settings")
            }
            
            Text(
                text = stringResource(R.string.app_name),
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            
            TextButton(onClick = { /* TODO: Presets */ }) {
                Text("Presets")
            }
        }
        
        Spacer(modifier = Modifier.height(32.dp))
        
        // Main timer display area
        Box(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                // Interval type indicator
                Card(
                    modifier = Modifier.padding(bottom = 24.dp),
                    colors = CardDefaults.cardColors(containerColor = intervalColor.copy(alpha = 0.1f))
                ) {
                    Text(
                        text = if (timerStatus.isWorkInterval) {
                            stringResource(R.string.work)
                        } else {
                            stringResource(R.string.rest)
                        },
                        modifier = Modifier.padding(horizontal = 24.dp, vertical = 12.dp),
                        style = MaterialTheme.typography.headlineMedium,
                        color = intervalColor,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                // Large timer display
                Text(
                    text = timerStatus.formatTimeRemaining(),
                    style = MaterialTheme.typography.displayLarge.copy(
                        fontSize = 72.sp,
                        fontFamily = FontFamily.Monospace,
                        fontWeight = FontWeight.Bold
                    ),
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onBackground
                )
                
                Spacer(modifier = Modifier.height(24.dp))
                
                // Round progress
                Text(
                    text = timerStatus.getRoundProgressText(),
                    style = MaterialTheme.typography.titleLarge,
                    color = MaterialTheme.colorScheme.onBackground.copy(alpha = 0.7f)
                )

                // Next interval preview (FR-005: 5 seconds before transition)
                timerStatus.getNextIntervalPreview()?.let { preview ->
                    Spacer(modifier = Modifier.height(16.dp))
                    Card(
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.8f)
                        )
                    ) {
                        Text(
                            text = preview,
                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp),
                            style = MaterialTheme.typography.bodyLarge,
                            color = MaterialTheme.colorScheme.onSurfaceVariant,
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }
        
        // Control buttons
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 16.dp),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            // Start/Pause/Resume button
            Button(
                onClick = {
                    when {
                        timerStatus.canStart -> viewModel.startTimer()
                        timerStatus.canPause -> viewModel.pauseTimer()
                        timerStatus.canResume -> viewModel.resumeTimer()
                    }
                },
                enabled = timerStatus.canStart || timerStatus.canPause || timerStatus.canResume,
                modifier = Modifier
                    .weight(1f)
                    .height(56.dp),
                shape = RoundedCornerShape(28.dp)
            ) {
                Text(
                    text = when {
                        timerStatus.canStart -> stringResource(R.string.start)
                        timerStatus.canPause -> stringResource(R.string.pause)
                        timerStatus.canResume -> stringResource(R.string.resume)
                        else -> stringResource(R.string.start)
                    },
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Medium
                )
            }
            
            Spacer(modifier = Modifier.width(16.dp))
            
            // Reset button
            OutlinedButton(
                onClick = { viewModel.resetTimer() },
                enabled = timerStatus.canReset,
                modifier = Modifier
                    .weight(1f)
                    .height(56.dp),
                shape = RoundedCornerShape(28.dp)
            ) {
                Text(
                    text = stringResource(R.string.reset),
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Medium
                )
            }
        }

        // Visual feedback overlays (FR-004: Full-screen visual indicators)
        VisualFeedbackOverlay(
            timerStatus = timerStatus,
            modifier = Modifier.fillMaxSize()
        )

        // Interval transition effects
        IntervalTransitionEffect(
            timerStatus = timerStatus,
            modifier = Modifier.fillMaxSize()
        )
    }
}
